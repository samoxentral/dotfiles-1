local set_hl = vim.api.nvim_set_hl
local colors = require('colors.colors')

set_hl(0, 'TSAnnotation', { fg = colors.base0F, sp = 'none' })
set_hl(0, 'TSAttribute', { fg = colors.base0A, sp = 'none' })
set_hl(0, 'TSCharacter', { fg = colors.base08, sp = 'none' })
set_hl(0, 'TSConstBuiltin', { fg = colors.base09, sp = 'none' })
set_hl(0, 'TSConstMacro', { fg = colors.base08, sp = 'none' })
set_hl(0, 'TSError', { fg = colors.base08, sp = 'none' })
set_hl(0, 'TSException', { fg = colors.base08, sp = 'none', italic = true })
set_hl(0, 'TSFloat', { fg = colors.base09, sp = 'none' })
set_hl(0, 'TSKeywordFunction', { fg = colors.base0E, sp = 'none', italic = true })
set_hl(0, 'TSKeywordReturn', { fg = colors.base0E, sp = 'none', italic = true })
set_hl(0, 'TSFuncBuiltin', { fg = colors.base0D, sp = 'none' })
set_hl(0, 'TSFuncMacro', { fg = colors.base08, sp = 'none' })
set_hl(0, 'TSKeywordOperator', { fg = colors.base0E, sp = 'none', italic = true })
set_hl(0, 'TSMethod', { fg = colors.base0D, sp = 'none' })
set_hl(0, 'TSNamespace', { fg = colors.base07, sp = 'none' })
set_hl(0, 'TSNone', { fg = colors.base05, sp = 'none' })
set_hl(0, 'TSParameter', { fg = colors.base08, sp = 'none' })
set_hl(0, 'TSParameterReference', { fg = colors.base05, sp = 'none' })
set_hl(0, 'TSPunctBracket', { fg = colors.base0C })
set_hl(0, 'TSPunctDelimiter', { fg = colors.base0C, sp = 'none' })
set_hl(0, 'TSPunctSpecial', { fg = colors.base08, sp = 'none' })
set_hl(0, 'TSStringRegex', { fg = colors.base0C, sp = 'none' })
set_hl(0, 'TSStringEscape', { fg = colors.base0C, sp = 'none' })
set_hl(0, 'TSSymbol', { fg = colors.base0B, sp = 'none' })
set_hl(0, 'TSTagDelimiter', { fg = colors.base0F, sp = 'none' })
set_hl(0, 'TSText', { fg = colors.base05, sp = 'none' })
set_hl(0, 'TSStrong', { bold = true })
set_hl(0, 'TSEmphasis', { fg = colors.base09, sp = 'none' })
set_hl(0, 'TSStrike', { fg = colors.base00, sp = 'none', strikethrough = true })
set_hl(0, 'TSLiteral', { fg = colors.base09, sp = 'none' })
set_hl(0, 'TSURI', { fg = colors.base09, sp = 'none', underline = true })
set_hl(0, 'TSTypeBuiltin', { fg = colors.base0E, sp = 'none', italic = true })
set_hl(0, 'TSVariableBuiltin', { fg = colors.base05, sp = 'none' })
set_hl(0, 'TSVariable', { fg = colors.base05 })
set_hl(0, 'TSDefinition', { sp = colors.base04, underline = true })
set_hl(0, 'TSDefinitionUsage', { sp = colors.base04, underline = true })
set_hl(0, 'TSCurrentScope', { bold = true })
set_hl(0, 'luaTSField', { fg = colors.base0D })
set_hl(0, 'TSFieldKey', { fg = colors.base08 })
set_hl(0, 'TSProperty', { fg = colors.base07 })
set_hl(0, 'TSConstructor', { fg = colors.base07 })

set_hl(0, 'Boolean', { fg = colors.base08, italic = true })
set_hl(0, 'Character', { fg = colors.base08 })
set_hl(0, 'Conditional', { fg = colors.base0E })
set_hl(0, 'Constant', { fg = colors.base08 })
set_hl(0, 'Define', { fg = colors.base0E, sp = 'none' })
set_hl(0, 'Delimiter', { fg = colors.base0F })
set_hl(0, 'Float', { fg = colors.base08 })
set_hl(0, 'Variable', { fg = colors.base05 })
set_hl(0, 'Function', { fg = colors.base0D })
set_hl(0, 'Identifier', { fg = colors.base08, sp = 'none' })
set_hl(0, 'Include', { fg = colors.base0E, italic = true })
set_hl(0, 'Keyword', { fg = colors.base0E, italic = true })
set_hl(0, 'Label', { fg = colors.base08 })
set_hl(0, 'Number', { fg = colors.base08 })
set_hl(0, 'Operator', { fg = colors.base0C })
set_hl(0, 'PreProc', { fg = colors.base0A })
set_hl(0, 'Repeat', { fg = colors.base0E, italic = true })
set_hl(0, 'Special', { fg = colors.base0C })
set_hl(0, 'SpecialChar', { fg = colors.base0F })
set_hl(0, 'Statement', { fg = colors.base08 })
set_hl(0, 'StorageClass', { fg = colors.base0A })
set_hl(0, 'String', { fg = colors.base0B })
set_hl(0, 'Structure', { fg = colors.base0E })
set_hl(0, 'Tag', { fg = colors.base0A })
set_hl(0, 'Todo', { fg = colors.base0A, bg = colors.base01 })
set_hl(0, 'Type', { fg = colors.base07, sp = 'none' })
set_hl(0, 'Typedef', { fg = colors.base0A })

set_hl(0, 'ClassDeclaration', { fg = colors.base0B })
set_hl(0, 'InterfaceDeclaration', { fg = '#78ccf0' })
set_hl(0, 'FunctionCall', { fg = colors.base0B })
set_hl(0, 'AttributeParameter', { fg = '#467cda' })
